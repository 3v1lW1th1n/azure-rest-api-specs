<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AutoRest.Generator.CSharp</name>
    </assembly>
    <members>
        <member name="P:Microsoft.Rest.Generator.CSharp.CSharpCodeGenerator.InternalConstructors">
            <summary>
            Indicates whether ctor needs to be generated with internal protection level.
            </summary>
        </member>
        <member name="P:Microsoft.Rest.Generator.CSharp.CSharpCodeGenerator.SyncMethods">
            <summary>
            Specifies mode for generating sync wrappers.
            </summary>
        </member>
        <member name="M:Microsoft.Rest.Generator.CSharp.CSharpCodeGenerator.NormalizeClientModel(Microsoft.Rest.Generator.ClientModel.ServiceClient)">
            <summary>
            Normalizes client model by updating names and types to be language specific.
            </summary>
            <param name="serviceClient"></param>
        </member>
        <member name="M:Microsoft.Rest.Generator.CSharp.CSharpCodeGenerator.Generate(Microsoft.Rest.Generator.ClientModel.ServiceClient)">
            <summary>
            Generates C# code for service client.
            </summary>
            <param name="serviceClient"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Rest.Generator.CSharp.CSharpCodeNamer.#ctor">
            <summary>
            Initializes a new instance of CSharpCodeNamingFramework.
            </summary>
        </member>
        <member name="M:Microsoft.Rest.Generator.CSharp.CSharpCodeNamer.NormalizeParameters(Microsoft.Rest.Generator.ClientModel.Method)">
            <summary>
            Normalizes the parameter names of a method
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.Rest.Generator.CSharp.CSharpCodeNamer.NormalizeClientProperties(Microsoft.Rest.Generator.ClientModel.ServiceClient)">
            <summary>
            Normalizes the client properties names of a client model
            </summary>
            <param name="client">A client model</param>
        </member>
        <member name="T:Microsoft.Rest.Generator.CSharp.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Rest.Generator.CSharp.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Rest.Generator.CSharp.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Rest.Generator.CSharp.Properties.Resources.UsageInformation">
            <summary>
              Looks up a localized string similar to The {0} nuget package is required to compile the generated code..
            </summary>
        </member>
        <member name="T:Microsoft.Rest.Generator.CSharp.SyncMethodsGenerationMode">
            <summary>
            Defines supported modes for sync wrapper generation
            </summary>
        </member>
        <member name="F:Microsoft.Rest.Generator.CSharp.SyncMethodsGenerationMode.Essential">
            <summary>
            Default. Generates only one sync returning body or header.
            </summary>
        </member>
        <member name="F:Microsoft.Rest.Generator.CSharp.SyncMethodsGenerationMode.All">
            <summary>
            Generates one sync method for each async method.
            </summary>
        </member>
        <member name="F:Microsoft.Rest.Generator.CSharp.SyncMethodsGenerationMode.None">
            <summary>
            Does not generate any sync methods.
            </summary>
        </member>
        <member name="P:Microsoft.Rest.Generator.CSharp.EnumTemplateModel.TypeDefinitionName">
            <summary>
            Trim the Trailing '?' from the Type Name so that it 
            does not occur in the type definition
            </summary>
        </member>
        <member name="P:Microsoft.Rest.Generator.CSharp.MethodTemplateModel.FailureStatusCodePredicate">
            <summary>
            Get the predicate to determine of the http operation status code indicates failure
            </summary>
        </member>
        <member name="M:Microsoft.Rest.Generator.CSharp.MethodTemplateModel.GetAsyncMethodParameterDeclaration">
            <summary>
            Generate the method parameter declaration for async methods and extensions
            </summary>
        </member>
        <member name="M:Microsoft.Rest.Generator.CSharp.MethodTemplateModel.GetSyncMethodParameterDeclaration(System.Boolean)">
            <summary>
            Generate the method parameter declaration for sync methods and extensions
            </summary>
            <param name="addCustomHeaderParameters">If true add the customHeader to the parameters</param>
            <returns>Generated string of parameters</returns>
        </member>
        <member name="M:Microsoft.Rest.Generator.CSharp.MethodTemplateModel.GetAsyncMethodParameterDeclaration(System.Boolean)">
            <summary>
            Generate the method parameter declaration for async methods and extensions
            </summary>
            <param name="addCustomHeaderParameters">If true add the customHeader to the parameters</param>
            <returns>Generated string of parameters</returns>
        </member>
        <member name="P:Microsoft.Rest.Generator.CSharp.MethodTemplateModel.SyncMethodInvocationArgs">
            <summary>
            Arguments for invoking the method from a synchronous extension method
            </summary>
        </member>
        <member name="M:Microsoft.Rest.Generator.CSharp.MethodTemplateModel.GetAsyncMethodInvocationArgs(System.String,System.String)">
            <summary>
            Get the invocation args for an invocation with an async method
            </summary>
        </member>
        <member name="P:Microsoft.Rest.Generator.CSharp.MethodTemplateModel.LocalParameters">
            <summary>
            Get the parameters that are actually method parameters in the order they appear in the method signature
            exclude global parameters
            </summary>
        </member>
        <member name="P:Microsoft.Rest.Generator.CSharp.MethodTemplateModel.OperationResponseReturnTypeString">
            <summary>
            Get the return type name for the underlying interface method
            </summary>
        </member>
        <member name="P:Microsoft.Rest.Generator.CSharp.MethodTemplateModel.TaskExtensionReturnTypeString">
            <summary>
            Get the return type for the async extension method
            </summary>
        </member>
        <member name="P:Microsoft.Rest.Generator.CSharp.MethodTemplateModel.OperationExceptionTypeString">
            <summary>
            Get the type for operation exception
            </summary>
        </member>
        <member name="P:Microsoft.Rest.Generator.CSharp.MethodTemplateModel.InitializeExceptionWithMessage">
            <summary>
            Get the expression for exception initialization with message.
            </summary>
        </member>
        <member name="P:Microsoft.Rest.Generator.CSharp.MethodTemplateModel.InitializeException">
            <summary>
            Get the expression for exception initialization with message.
            </summary>
        </member>
        <member name="P:Microsoft.Rest.Generator.CSharp.MethodTemplateModel.InitializeResponseBody">
            <summary>
            Gets the expression for response body initialization.
            </summary>
        </member>
        <member name="P:Microsoft.Rest.Generator.CSharp.MethodTemplateModel.SetDefaultHeaders">
            <summary>
            Gets the expression for default header setting.
            </summary>
        </member>
        <member name="P:Microsoft.Rest.Generator.CSharp.MethodTemplateModel.ReturnTypeString">
            <summary>
            Get the type name for the method's return type
            </summary>
        </member>
        <member name="P:Microsoft.Rest.Generator.CSharp.MethodTemplateModel.RequestBody">
            <summary>
            Get the method's request body (or null if there is no request body)
            </summary>
        </member>
        <member name="P:Microsoft.Rest.Generator.CSharp.MethodTemplateModel.ClientReference">
            <summary>
            Generate a reference to the ServiceClient
            </summary>
        </member>
        <member name="M:Microsoft.Rest.Generator.CSharp.MethodTemplateModel.GetSerializationSettingsReference(Microsoft.Rest.Generator.ClientModel.IType)">
            <summary>
            Returns serialization settings reference.
            </summary>
            <param name="serializationType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Rest.Generator.CSharp.MethodTemplateModel.GetDeserializationSettingsReference(Microsoft.Rest.Generator.ClientModel.IType)">
            <summary>
            Returns deserialization settings reference.
            </summary>
            <param name="deserializationType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Rest.Generator.CSharp.MethodTemplateModel.BuildUrl(System.String)">
            <summary>
            Generate code to build the URL from a url expression and method parameters
            </summary>
            <param name="variableName">The variable to store the url in.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Rest.Generator.CSharp.MethodTemplateModel.BuildInputMappings">
            <summary>
            Generates input mapping code block.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Rest.Generator.CSharp.ClientModelExtensions.SkipUrlEncoding(Microsoft.Rest.Generator.ClientModel.Parameter)">
            <summary>
            Determine whether URL encoding should be skipped for this parameter
            </summary>
            <param name="parameter">The parameter to check</param>
            <returns>true if url encoding should be skipped for the parameter, otherwise false</returns>
        </member>
        <member name="M:Microsoft.Rest.Generator.CSharp.ClientModelExtensions.GetHttpMethod(Microsoft.Rest.Generator.ClientModel.HttpMethod)">
            <summary>
            Generate code for the string representation for http method
            </summary>
            <param name="method">The http method</param>
            <returns>The code to generate the http method, as a string</returns>
        </member>
        <member name="M:Microsoft.Rest.Generator.CSharp.ClientModelExtensions.GetFormattedPropertyDocumentation(Microsoft.Rest.Generator.ClientModel.Property)">
            <summary>
            Format the documentation of a property properly with the correct getters and setters. Note that this validation will
            checks for special cases such as acronyms and article words.
            </summary>
            <param name="property">The given property documentation to format</param>
            <returns>A reference to the property documentation</returns>
        </member>
        <member name="M:Microsoft.Rest.Generator.CSharp.ClientModelExtensions.GetFormattedReferenceValue(Microsoft.Rest.Generator.ClientModel.Parameter,System.String)">
            <summary>
            Format the value of a sequence given the modeled element format.  Note that only sequences of strings are supported
            </summary>
            <param name="parameter">The parameter to format</param>
            <param name="clientReference">The reference to the client</param>
            <returns>A reference to the formatted parameter value</returns>
        </member>
        <member name="M:Microsoft.Rest.Generator.CSharp.ClientModelExtensions.GetSeparator(Microsoft.Rest.Generator.ClientModel.CollectionFormat)">
            <summary>
            Return the separator associated with a given collectionFormat
            </summary>
            <param name="format">The collection format</param>
            <returns>The separator</returns>
        </member>
        <member name="M:Microsoft.Rest.Generator.CSharp.ClientModelExtensions.ToString(Microsoft.Rest.Generator.ClientModel.IType,System.String,System.String)">
            <summary>
            Simple conversion of the type to string
            </summary>
            <param name="type">The type to convert</param>
            <param name="clientReference">The reference to the client</param>
            <param name="reference">a reference to an instance of the type</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Rest.Generator.CSharp.ClientModelExtensions.IsValueType(Microsoft.Rest.Generator.ClientModel.IType)">
            <summary>
            Determines if the given IType is a value type in C#
            </summary>
            <param name="type">The type to check</param>
            <returns>True if the type maps to a C# value type, otherwise false</returns>
        </member>
        <member name="M:Microsoft.Rest.Generator.CSharp.ClientModelExtensions.ValidateType(Microsoft.Rest.Generator.ClientModel.IType,Microsoft.Rest.Generator.Utilities.IScopeProvider,System.String,System.Collections.Generic.Dictionary{Microsoft.Rest.Generator.ClientModel.Constraint,System.String})">
            <summary>
            Generate code to perform required validation on a type
            </summary>
            <param name="type">The type to validate</param>
            <param name="scope">A scope provider for generating variable names as necessary</param>
            <param name="valueReference">A reference to the value being validated</param>
            <param name="constraints">Constraints</param>
            <returns>The code to validate the reference of the given type</returns>
        </member>
        <member name="P:Microsoft.Rest.Generator.CSharp.ParameterTemplateModel.DeclarationExpression">
            <summary>
            Gets parameter declaration
            </summary>
        </member>
        <member name="P:Microsoft.Rest.Generator.CSharp.ParameterTemplateModel.CanBeValidated">
            <summary>
            Gets True if parameter can call .Validate method
            </summary>
        </member>
        <member name="P:Microsoft.Rest.Generator.CSharp.ModelTemplateModel.AllPropertyTemplateModels">
            <summary>
            Returns properties for this type and all ancestor types, including information on which level of ancestry
            the property comes from (0 for top-level base class that has properties, 1 for a class derived from that
            top-level class, etc.).
            </summary>
        </member>
    </members>
</doc>
