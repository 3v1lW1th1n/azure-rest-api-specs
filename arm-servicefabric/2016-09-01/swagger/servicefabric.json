{
  "swagger": "2.0",
  "info": {
    "title": "ServiceFabricClient",
    "version": "2016-09-01"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "Azure Active Directory OAuth2 Flow",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}": {
      "patch": {
        "tags": [
          "ClusterPatchOperation"
        ],
        "x-ms-long-running-operation": true,
        "operationId": "Clusters_Update",
        "description": "Update cluster configuration",
        "x-ms-examples": {
          "Patch a cluster": {
            "$ref": "../examples/ClusterPatchOperation_exmaple.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/clusterNameParameter"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "name": "ClusterUpdateParameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClusterUpdateParameters"
            },
            "description": "The parameters which contains the property value and property name which used to update the cluster configuration"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Cluster updated successfully",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          },
          "202": {
            "description": "Accepted - Update request accepted; the operation will complete asynchronously."
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      },
      "get": {
        "tags": [
          "ClusterGetOperation"
        ],
        "operationId": "Clusters_Get",
        "description": "Get cluster resource",
        "x-ms-examples": {
          "Get a cluster": {
            "$ref": "../examples/ClusterGetOperation_example.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/clusterNameParameter"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Get cluster successfully",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ClusterCreateOperation"
        ],
        "operationId": "Clusters_Create",
        "x-ms-long-running-operation": true,
        "description": "Create cluster resource",
        "x-ms-examples": {
          "Put a cluster with min parmaeter": {
            "$ref": "../examples/ClusterPutOperation_exmaple_min.json"
          },
          "Put a cluster with max parmaeter": {
            "$ref": "../examples/ClusterPutOperation_exmaple_max.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/clusterNameParameter"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "name": "ClusterResource",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cluster"
            },
            "description": "Put Request"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Put cluster successfully",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          },
          "202": {
            "description": "Accepted - Put request accepted; the operation will complete asynchronously."
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ClusterDeleteOperation"
        ],
        "operationId": "Clusters_Delete",
        "description": "Delete cluster resource",
        "x-ms-examples": {
          "Delete a cluster": {
            "$ref": "../examples/ClusterDeleteOperation_example.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/clusterNameParameter"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - cluster deleted  successfully"
          },
          "204": {
            "description": "NoContent"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters": {
      "get": {
        "tags": [
          "ClusterListByResourceGroupOperation"
        ],
        "operationId": "Clusters_ListByResourceGroup",
        "description": "List cluster resource by resource group",
        "x-ms-examples": {
          "List cluster by resource group": {
            "$ref": "../examples/ClusterListByResourceGroupOperation_exmaple.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Get cluster  successfully",
            "schema": {
              "$ref": "#/definitions/ClusterListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabric/clusters": {
      "get": {
        "tags": [
          "ClusterListOperation"
        ],
        "operationId": "Clusters_List",
        "description": "List cluster resource",
        "x-ms-examples": {
          "List clusters": {
            "$ref": "../examples/ClusterListOperation_example.json"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "$ref": "#/parameters/subscriptionId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Get cluster  successfully",
            "schema": {
              "$ref": "#/definitions/ClusterListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/providers/Microsoft.ServiceFabric/operations": {
      "get": {
        "tags": [
          "Operations"
        ],
        "operationId": "Operations_List",
        "description": "Lists all of the available ServiceFabric REST API operations.",
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/OperationListResult"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    }
  },
  "definitions": {
    "CertificateDescription": {
      "description": "Certificate details",
      "properties": {
        "thumbprint": {
          "description": "Thumbprint of the primary certificate",
          "type": "string"
        },
        "thumbprintSecondary": {
          "description": "Thumbprint of the secondary certificate ",
          "type": "string"
        },
        "x509StoreName": {
          "description": "The local certificate store location",
          "type": "string",
          "enum": [
            "AddressBook",
            "AuthRoot",
            "CertificateAuthority",
            "Disallowed",
            "My",
            "Root",
            "TrustedPeople",
            "TrustedPublisher"
          ]
        }
      }
    },
    "SettingsParameterDescription": {
      "description": "ServiceFabric settings under sections",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of settings property"
        },
        "value": {
          "type": "string",
          "description": "The value of the property"
        }
      }
    },
    "SettingsSectionDescription": {
      "description": "ServiceFabric section settings",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of settings section"
        },
        "parameters": {
          "description": "Settings parameter value",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SettingsParameterDescription"
          }
        }
      }
    },
    "EndpointRangeDescription": {
      "description": "Port range details",
      "properties": {
        "startPort": {
          "description": "Starting port of a range of ports",
          "type": "integer"
        },
        "endPort": {
          "description": "End port of a range of ports",
          "type": "integer"
        }
      }
    },
    "NodeTypeDescription": {
      "description": "NodeType details",
      "properties": {
        "name": {
          "description": "Name of NodeType",
          "type": "string"
        },
        "placementProperties": {
          "description": "Placement property key",
          "type": "object",
          "additionalProperties": {
            "description": "Placement property value",
            "type": "string"
          }
        },
        "capacities": {
          "description": "Capacity property key",
          "type": "object",
          "additionalProperties": {
            "description": "Capacity property value",
            "type": "string"
          }
        },
        "clientConnectionEndpointPort": {
          "description": "TCP gateway endpoint port",
          "type": "integer"
        },
        "httpGatewayEndpointPort": {
          "description": "Http gateway endpoint port",
          "type": "integer"
        },
        "durabilityLevel": {
          "description": "Nodetype durability Level",
          "type": "string",
          "enum": [
            "Bronze",
            "Silver",
            "Gold",
            "Platimun"
          ]
        },
        "applicationPorts": {
          "description": "Ports used by applications",
          "$ref": "#/definitions/EndpointRangeDescription"
        },
        "ephemeralPorts": {
          "description": "System assgined application ports",
          "$ref": "#/definitions/EndpointRangeDescription"
        },
        "isPrimary": {
          "description": "Mark this node as primay",
          "type": "boolean"
        },
        "vmInstanceCount": {
          "description": "VMSS instance count",
          "type": "integer"
        },
        "reverseProxyEndpointPort": {
          "description": "Endpoint used by reverse proxy",
          "type": "integer"
        }
      }
    },
    "ClientCertificateThumbprint": {
      "description": "Client certificate details using thumbprint",
      "properties": {
        "isAdmin": {
          "type": "boolean",
          "description": "Is this certificate used for admin access from the client, if false , it is used or query only access"
        },
        "certificateThumbprint": {
          "description": "Certificate thumbprint",
          "type": "string"
        }
      }
    },
    "ClientCertificateCommonName": {
      "description": "Client certificate details using common name",
      "properties": {
        "isAdmin": {
          "type": "boolean",
          "description": "Is this certificate used for admin access from the client, if false , it is used or query only access"
        },
        "CertificateCommonName": {
          "description": "Certificate common name to be granted access; be carefull using wild card common names",
          "type": "string"
        },
        "certificateIssuerThumbprint": {
          "description": "Certificate issuer thumbprint",
          "type": "string"
        }        
      }
    },
    "ClusterEnvironment": {
      "description": "Cluster operating system",
      "type": "string",
      "enum": [
        "Default",
        "Windows",
        "Linux"
      ]
    },
    "ClusterVersionDetails": {
      "description": "Fabric version details",
      "properties": {
        "codeVersion": {
          "description": "Fabric code version",
          "type": "string"
        },
        "supportExpiryUtc": {
          "description": "The date of expiry of the above version",
          "type": "string"
        },
        "environment": {
          "description": "Cluster operating system",
          "$ref": "#/definitions/ClusterEnvironment"
        }
      }
    },
    "ServiceTypeHealthPolicy": {
      "description": "Cluster health policy",
      "properties": {
        "maxPercentUnhealthyServices": {
          "description": "Max percent of unhealthy services",
          "type": "integer"
        }
      }
    },
    "ApplicationHealthPolicy": {
      "description": "Application health policy",
      "properties": {
        "defaultServiceTypeHealthPolicy": {
          "description": "Health policy for the default service",
          "$ref": "#/definitions/ServiceTypeHealthPolicy"
        },
        "serivceTypeHealthPolicies": {
          "description": "SerivceType health policy",
          "type": "object",
          "additionalProperties": {
            "description": "ServiceType health policy",
            "$ref": "#/definitions/ServiceTypeHealthPolicy"
          }
        }
      }
    },
    "ClusterUpgradeHealthPolicy": {
      "description": "Default cluster upgrade health policy",
      "properties": {
        "maxPercentUnhealthyNodes": {
          "description": "Max percent of unhealthy nodes",
          "type": "integer"
        },
        "maxPercentUnhealthyApplications": {
          "description": "Max percent of unhealthy applications",
          "type": "integer"
        },
        "applicationHealthPolicies": {
          "description": "Application health policy",
          "type": "object",
          "additionalProperties": {
            "description": "Application health policy",
            "$ref": "#/definitions/ApplicationHealthPolicy"
          }
        }
      }
    },
    "ServiceTypeDeltaHealthPolicy": {
      "description": "Service health policy",
      "properties": {
        "maxPercentDeltaUnhealthyServices": {
          "description": "Max percent of additional unhealthy services",
          "type": "integer"
        }
      }
    },
    "ApplicationDeltaHealthPolicy": {
      "description": "Application health policy",
      "properties": {
        "defaultServiceTypeDeltaHealthPolicy": {
          "description": "Delta health policy for default services",
          "$ref": "#/definitions/ServiceTypeDeltaHealthPolicy"
        },
        "serivceTypeDeltaHealthPolicies": {
          "description": "Health policy for additional service",
          "type": "object",
          "additionalProperties": {
            "description": "Delta health policy for service",
            "$ref": "#/definitions/ServiceTypeDeltaHealthPolicy"
          }
        }
      }
    },
    "ClusterUpgradeDeltaHealthPolicy": {
      "description": "Delta health policy for the cluster",
      "properties": {
        "maxPercentDeltaUnhealthyNodes": {
          "description": "Additional unhealthy nodes percentage",
          "type": "integer"
        },
        "maxPercentUpgradeDomainDeltaUnhealthyNodes": {
          "description": "Additional unhealthy nodes percentage per upgrade domain ",
          "type": "integer"
        },
        "maxPercentDeltaUnhealthyApplications": {
          "description": "Additional unhealthy applications percentage",
          "type": "integer"
        },
        "applicationHealthPolicies": {
          "description": "Application health policy",
          "type": "object",
          "additionalProperties": {
            "description": "Additional unhealthy applications percentage",
            "$ref": "#/definitions/ApplicationDeltaHealthPolicy"
          }
        }
      }
    },
    "ClusterUpgradePolicy": {
      "description": "Cluster upgrade policy",
      "properties": {
        "overrideUserUpgradePolicy": {
          "description": "Use the user defined upgrade policy or not",
          "type": "boolean"
        },
        "forceRestart": {
          "description": "Force node to restart or not",
          "type": "boolean"
        },
        "upgradeReplicaSetCheckTimeout": {
          "description": "Timeout for replica set upgrade to complete",
          "type": "string"
        },
        "healthCheckWaitDuration": {
          "description": "The length of time to wait after completing an upgrade domain before performing health checks.",
          "type": "string"
        },
        "healthCheckStableDuration": {
          "description": "The length of time that health checks must pass continuously.",
          "type": "string"
        },
        "healthCheckRetryTimeout": {
          "description": "The length of time that health checks can fail continuously",
          "type": "string"
        },
        "upgradeTimeout": {
          "description": "The upgrade timeout.",
          "type": "string"
        },
        "upgradeDomainTimeout": {
          "description": "The timeout for any upgrade domain.",
          "type": "string"
        },
        "healthPolicy": {
          "description": "Cluster health Policy",
          "$ref": "#/definitions/ClusterUpgradeHealthPolicy"
        },
        "deltaHealthPolicy": {
          "description": "Delta  health policy",
          "$ref": "#/definitions/ClusterUpgradeDeltaHealthPolicy"
        }
      }
    },
    "DiagnosticsStorageAccountConfig": {
      "description": "Diagnostics storage account config",
      "properties": {
        "storageAccountName": {
          "description": "Diagnostics storage account name",
          "type": "string"
        },
        "primaryAccessKey": {
          "description": "Primary key for the Azure Storage",
          "type": "string"
        },
        "secondaryAccessKey": {
          "description": "Secondary key for the Azure Storage",
          "type": "string"
        },
        "protectedAccountKeyName": {
          "description": "Protected Diagnostics storage key name",
          "type": "string"
        },
        "blobEndpoint": {
          "description": "Diagnostics storage account blob endpoint",
          "type": "string"
        },
        "queueEndpoint": {
          "description": "Diagnostics storage account queue endpoint",
          "type": "string"
        },
        "tableEndpoint": {
          "description": "Diagnostics storage account table endpoint",
          "type": "string"
        }
      }
    },
    "ClusterPropertiesUpdateParameters": {
      "description": "The cluster resource properties can be updated",
      "properties": {
        "reliabilityLevel": {
          "description": "Cluster reliability level indicates replica set size of system service",
          "type": "string",
          "enum": [
            "Invalid",
            "Bronze",
            "Silver",
            "Gold",
            "Platinum"
          ]
        },
        "upgradeMode": {
          "description": "Cluster upgrade mode indicates if fabric upgrade is initiated automatically by the system or not",
          "type": "string",
          "enum": [
            "Default",
            "Automatic",
            "Manual"
          ]
        },
        "clusterCodeVersion": {
          "description": "The ServiceFabric code version, if set it, please make sure you have set upgradeMode to Manual, otherwise ,it will fail",
          "type": "string"
        },
        "certificate": {
          "description": "The cluster certificate settings, the new certificate should exist in VMSS or KeyVault,before you add it, it will override original value",
          "$ref": "#/definitions/CertificateDescription"
        },
        "clientCertificateThumbprints": {
          "description": "The client thumbprint details ,it is used for client access for cluter operation, it will override existing collection",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientCertificateThumbprint"
          }
        },
        "fabricSettings": {
          "description": "ServiceFabric section settings, Note, it will overwrite existing collection",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SettingsSectionDescription"
          }
        },
        "reverseProxyCertificate": {
          "description": "Certificate for the reverse proxy",
          "$ref": "#/definitions/CertificateDescription"
        },
        "nodeTypes": {
          "description": "The list of nodetypes that make up the cluster, it will override",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeTypeDescription"
          }
        }
      }
    },
    "ClusterProperties": {
      "description": "The cluster resource properties",
      "properties": {
        "availableClusterVersions": {
          "description": "The available cluster code version which the cluster can upgrade to, note that you must choose upgradeMode to manual to upgrade to",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ClusterVersionDetails"
          }
        },
        "clusterId": {
          "readOnly": true,
          "description": "The cluster id the resource identifier for the cluster resource",
          "type": "string"
        },
        "clusterState": {
          "description": "The state for the cluster",
          "readOnly": true,
          "type": "string",
          "enum": [
            "Default",
            "WaitingForNodes",
            "Deploying",
            "BaselineUpgrade",
            "UpdatingUserConfiguration",
            "UpdatingUserCertificate",
            "UpdatingInfrastructure",
            "EnforcingClusterVersion",
            "UpgradeServiceUnreachable",
            "Deleting",
            "ScaleUp",
            "ScaleDown",
            "AutoScale",
            "Ready",
            "Failed"
          ]
        },
        "clusterEndpoint": {
          "description": "The endpoint for the cluster connecting to servicefabric resource provider",
          "readOnly": true,
          "type": "string"
        },
        "clusterCodeVersion": {
          "description": "The ServiceFabric code version running in your cluster",
          "type": "string"
        },
        "certificate": {
          "description": "The certificates used for cluster security",
          "$ref": "#/definitions/CertificateDescription"
        },
        "reliabilityLevel": {
          "description": "Cluster reliability level indicates replica set size of system service",
          "type": "string",
          "enum": [
            "Bronze",
            "Silver",
            "Gold",
            "Platinum"
          ]
        },
        "upgradeMode": {
          "description": "Cluster upgrade mode indicates if fabric upgrade is initiated automatically by the system or not",
          "type": "string",
          "enum": [
            "Automatic",
            "Manual"
          ]
        },
        "clientCertificateThumbprints": {
          "description": "The client thumbprint details ,it is used for client access for cluter operation",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientCertificateThumbprint"
          }
        },
        "clientCertificateCommonNames": {
          "description": "Client certificate details using common name",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientCertificateCommonName"
          }
        },
        "fabricSettings": {
          "description": "ServiceFabric section settings",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SettingsSectionDescription"
          }
        },
        "reverseProxyCertificate": {
          "description": "The certificate details for the reverse proxy",
          "$ref": "#/definitions/CertificateDescription"
        },
        "managementEndpoint": {
          "description": "Http endpoint for client access",
          "type": "string"
        },
        "nodeTypes": {
          "description": "The list of nodetypes that make up the cluster",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeTypeDescription"
          }
        },
        "provisioningState": {
          "readOnly": true,
          "description": "The provisioning state of the cluster resource",
          "type": "string",
          "enum": [
            "Default",
            "Updating",
            "Succeeded",
            "Failed",
            "Canceled"
          ],
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true
          }
        },
        "vmImage": {
          "description": "The vm image name",
          "type": "string"
        },
        "diagnosticsStorageAccountConfig": {
          "description": "The storage diagnostics account configuration details",
          "$ref": "#/definitions/DiagnosticsStorageAccountConfig"
        },
        "upgradeDescription": {
          "description": "Cluster upgrade policy",
          "$ref": "#/definitions/ClusterUpgradePolicy"
        }
      },
      "required": [
        "managementEndpoint",
        "reliabilityLevel",
        "vmImage",
        "diagnosticsStorageAccountConfig",
        "nodeTypes",
        "upgradeMode"
      ]
    },
    "ClusterUpdateParameters": {
      "description": "Cluster update request",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/ClusterPropertiesUpdateParameters"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Cluster update parameters"
        }
      }
    },
    "Cluster": {
      "description": "The cluster resource",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/ClusterProperties"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ]
    },
    "ClusterListResult": {
      "description": "Cluster list results",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Cluster"
          }
        },
        "nextLink": {
          "type": "string",
          "description": "The URL to use for getting the next set of results."
        }
      }
    },
    "AvailableOperationDisplay": {
      "description": "Operation supported by ServiceFabric resource provider",
      "properties": {
        "provider": {
          "description": "Provider name",
          "type": "string"
        },
        "resource": {
          "description": "Resource name",
          "type": "string"
        },
        "operation": {
          "description": "Operation name",
          "type": "string"
        },
        "description": {
          "description": "Operation description",
          "type": "string"
        }
      }
    },
    "OperationResult": {
      "description": "Available operation list result",
      "properties": {
        "name": {
          "description": "Result name",
          "type": "string"
        },
        "display": {
          "$ref": "#/definitions/AvailableOperationDisplay"
        },
        "origin": {
          "description": "Origin result",
          "type": "string"
        },
        "nextLink": {
          "type": "string",
          "description": "The URL to use for getting the next set of results."
        }
      }
    },
    "OperationListResult": {
      "description": "Result of the request to list ServiceFabric operations. It contains a list of operations and a URL link to get the next set of results.",
      "properties": {
        "value": {
          "description": "List of ServiceFabric operations supported by the Microsoft.ServiceFabric resource provider.",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/OperationResult"
          }
        },
        "nextLink": {
          "description": "URL to get the next set of operation list results if there are any.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ErrorModel": {
      "description": "The structure of the error",
      "properties": {
        "error": {
          "description": "The error detail ",
          "properties": {
            "code": {
              "description": "The error code",
              "type": "string"
            },
            "message": {
              "description": "The error message",
              "type": "string"
            }
          }
        }
      }
    },
    "Resource": {
      "description": "The resource model definition.",
      "properties": {
        "id": {
          "readOnly": true,
          "type": "string",
          "description": "Resource ID."
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "Resource name."
        },
        "type": {
          "readOnly": true,
          "type": "string",
          "description": "Resource type."
        },
        "location": {
          "type": "string",
          "description": "Resource location."
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Resource tags."
        }
      },
      "required": [
        "location"
      ],
      "x-ms-azure-resource": true
    }
  },
  "parameters": {
    "subscriptionId": {
      "type": "string",
      "name": "subscriptionId",
      "description": "The customer subscription identifier",
      "in": "path",
      "required": true
    },
    "api-version": {
      "type": "string",
      "name": "api-version",
      "description": "The version of the ServiceFabric resouce provider api",
      "in": "query",
      "required": true
    },
    "resourceGroupNameParameter": {
      "description": "The name of the resource group to which the resource belongs or get created",
      "name": "resourceGroupName",
      "in": "path",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "clusterNameParameter": {
      "description": "The name of the cluster resource",
      "name": "clusterName",
      "in": "path",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    }
  }
}